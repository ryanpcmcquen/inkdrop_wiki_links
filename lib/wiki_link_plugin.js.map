{"version":3,"sources":["../src/wiki_link_plugin.js"],"names":["LINK_REGEX","locator","value","fromIndex","indexOf","wikiLinkPlugin","opts","wikiLinkClassName","aliasDivider","inlineTokenizer","eat","match","exec","displayName","trim","classNames","type","data","alias","hName","hProperties","className","hChildren","Parser","inlineTokenizers","prototype","inlineMethods","wiki_link","splice","Compiler","visitors","node","module","exports"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEO,MAAMA,UAAU,GAAG,qBAAnB;;;AAEP,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,SAAR,KAAsB;AAClC,SAAOD,KAAK,CAACE,OAAN,CAAc,GAAd,EAAmBD,SAAnB,CAAP;AACH,CAFD,C,CAIA;AACA;AACA;;;AACA,MAAME,cAAc,GAAG,UAAUC,IAAI,GAAG,EAAjB,EAAqB;AACxC,MAAIC,iBAAiB,GAAGD,IAAI,CAACC,iBAAL,IAA0B,WAAlD;AACA,MAAIC,YAAY,GAAGF,IAAI,CAACE,YAAL,IAAqB,GAAxC;;AAEA,QAAMC,eAAe,GAAG,CAACC,GAAD,EAAMR,KAAN,KAAgB;AACpC,QAAIS,KAAK,GAAGX,UAAU,CAACY,IAAX,CAAgBV,KAAhB,CAAZ;;AAEA,QAAIS,KAAJ,EAAW;AACP,YAAME,WAAW,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASG,IAAT,EAApB;AACA,UAAIC,UAAU,GAAGR,iBAAjB;AAEA,aAAOG,GAAG,CAACC,KAAK,CAAC,CAAD,CAAN,CAAH,CAAc;AACjBK,QAAAA,IAAI,EAAE,WADW;AAEjBC,QAAAA,IAAI,EAAE;AACFC,UAAAA,KAAK,EAAEL,WADL;AAEFM,UAAAA,KAAK,EAAE,MAFL;AAGFC,UAAAA,WAAW,EAAE;AACTC,YAAAA,SAAS,EAAEN;AADF,WAHX;AAMFO,UAAAA,SAAS,EAAE,CACP;AACIN,YAAAA,IAAI,EAAE,MADV;AAEId,YAAAA,KAAK,EAAEW;AAFX,WADO;AANT;AAFW,OAAd,CAAP;AAgBH;AACJ,GAxBD;;AA0BAJ,EAAAA,eAAe,CAACR,OAAhB,GAA0BA,OAA1B;AAEA,QAAMsB,MAAM,GAAG,KAAKA,MAApB;AAEA,QAAMC,gBAAgB,GAAGD,MAAM,CAACE,SAAP,CAAiBD,gBAA1C;AACA,QAAME,aAAa,GAAGH,MAAM,CAACE,SAAP,CAAiBC,aAAvC;AACAF,EAAAA,gBAAgB,CAACG,SAAjB,GAA6BlB,eAA7B;AACAiB,EAAAA,aAAa,CAACE,MAAd,CAAqBF,aAAa,CAACtB,OAAd,CAAsB,MAAtB,CAArB,EAAoD,CAApD,EAAuD,WAAvD,EArCwC,CAuCxC;;AACA,QAAMyB,QAAQ,GAAG,KAAKA,QAAtB;;AAEA,MAAIA,QAAQ,IAAI,IAAhB,EAAsB;AAClB,UAAMC,QAAQ,GAAGD,QAAQ,CAACJ,SAAT,CAAmBK,QAApC;;AACA,QAAIA,QAAJ,EAAc;AACVA,MAAAA,QAAQ,CAACH,SAAT,GAAsBI,IAAD,IAAU;AAC3B,YAAIA,IAAI,CAACd,IAAL,CAAUC,KAAV,IAAmBa,IAAI,CAAC7B,KAA5B,EAAmC;AAC/B,iBAAQ,KAAI6B,IAAI,CAAC7B,KAAM,GAAEM,YAAa,GAAEuB,IAAI,CAACd,IAAL,CAAUC,KAAM,IAAxD;AACH;;AACD,eAAQ,KAAIa,IAAI,CAAC7B,KAAM,IAAvB;AACH,OALD;AAMH;AACJ;AACJ,CArDD;;AAuDA8B,MAAM,CAACC,OAAP,GAAiB5B,cAAjB","sourcesContent":["/**\n * @author landakram\n * @copyright 2017 Mark Hudnall\n * @license MIT\n * @see https://github.com/landakram/remark-wiki-link\n */\n// Modified version of:\n// https://github.com/landakram/remark-wiki-link/blob/v0.0.4/src/index.js\n//\n// Replaces:\n// \"remark-wiki-link\": \"0.x.x\",\n\nexport const LINK_REGEX = /^\\[{2}([^\\]]+)\\]{2}/;\n\nconst locator = (value, fromIndex) => {\n    return value.indexOf(\"[\", fromIndex);\n};\n\n// @WARNING:\n// This cannot be an arrow function\n// because it relies on 'this'.\nconst wikiLinkPlugin = function (opts = {}) {\n    let wikiLinkClassName = opts.wikiLinkClassName || \"wiki_link\";\n    let aliasDivider = opts.aliasDivider || \":\";\n\n    const inlineTokenizer = (eat, value) => {\n        let match = LINK_REGEX.exec(value);\n\n        if (match) {\n            const displayName = match[1].trim();\n            let classNames = wikiLinkClassName;\n\n            return eat(match[0])({\n                type: \"wiki_link\",\n                data: {\n                    alias: displayName,\n                    hName: \"span\",\n                    hProperties: {\n                        className: classNames,\n                    },\n                    hChildren: [\n                        {\n                            type: \"text\",\n                            value: displayName,\n                        },\n                    ],\n                },\n            });\n        }\n    };\n\n    inlineTokenizer.locator = locator;\n\n    const Parser = this.Parser;\n\n    const inlineTokenizers = Parser.prototype.inlineTokenizers;\n    const inlineMethods = Parser.prototype.inlineMethods;\n    inlineTokenizers.wiki_link = inlineTokenizer;\n    inlineMethods.splice(inlineMethods.indexOf(\"link\"), 0, \"wiki_link\");\n\n    // Stringify for wiki link:\n    const Compiler = this.Compiler;\n\n    if (Compiler != null) {\n        const visitors = Compiler.prototype.visitors;\n        if (visitors) {\n            visitors.wiki_link = (node) => {\n                if (node.data.alias != node.value) {\n                    return `[[${node.value}${aliasDivider}${node.data.alias}]]`;\n                }\n                return `[[${node.value}]]`;\n            };\n        }\n    }\n};\n\nmodule.exports = wikiLinkPlugin;\n"],"file":"wiki_link_plugin.js"}